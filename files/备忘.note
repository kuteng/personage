
[diff]
    tool = bc3
	external = bcompare
[difftool]
    prompt = false
[difftool "bc3"]
    #use cygpath to transform cygwin path $LOCAL (something like /tmp/U5VvP1_abc) to windows path, because bc3 is a windows software
    #cmd = \"c:/program files/beyond compare 3/bcomp.exe\" "$(cygpath -w $LOCAL)" "$REMOTE"
    cmd = \"C:/Program Files (x86)/Beyond Compare 4/BCompare.exe\" "$(cygpath -w $LOCAL)" "$REMOTE"
[merge]
    tool = bc3
[mergetool]
    prompt = false
[mergetool "bc3"]
    #trustExitCode = true
    #cmd = \"c:/program files/beyond compare 3/bcomp.exe\" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
    cmd = \"C:/Program Files (x86)/Beyond Compare 4/BCompare.exe\" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
    

在[git]/etc/gitconfig文件内添加如下内容：
----------------------------------------------
[diff]
	external = bcompare
----------------------------------------------
此方法只能是比较实用bcompare，不能使合并使用bcompare！


[diff "astextplain"]
	textconv = astextplain
	
==================================================================
2015年8月16日：笔记本

下载了新的git仓库。
https://github.com/gmarik/vundle.git
https://github.com/derekwyatt/vim-scala.git

-------------------------
如何给gvim添加新的编译器呢？我要添加的是sbt编译器。
sbt是针对java和scala的编译器。那么scala也自带编译器吧！

-------------------------
UltraEdit中，突然粘贴复制不好使，可能是无意中按了快捷键“Ctrl + [NUM]”，激活了Windows中的其他剪切板。

-------------------------
Chrome
切换标签使用：Ctrl + [NUM].
快速定位地址栏使用：Ctrl + L 或 Alt + D
关闭标签页使用：Ctrl + F4
打开主页：Alt + Home

-------------------------
gvim 快捷键
上翻页：Ctrl + b
下翻页：Ctrl + f

0  是数目字 0 而不是英文字母 o。或是 Hmoe 键，移至行首，

//取自正则表达式：^为开始，$为结束。
^  移至行首（第一个非空白字符），注意，要 Shift 键。
$  移至行尾，或 End 键。要 Shift 键。

// 取自goto
G  移至文档尾，最后一个非空白字符。
gg 移至文档头，第一个非空白字符。

w  移至系一个字(word)字首
W  同上，但会忽略标点。

:n 移到第n行行首。或nG
n| 移到第n个字元(栏)处。

)  移到下一个句子
(  移到上一个句子
}  移到下一个段落
{  移到上一个段落

-------------------------
计算机存储单位一般用字节(Byte)、千字节(KB)、兆字节(MB)、吉字节(GB)、太字节(TB)、拍字节(PB)、艾字节(EB)、泽它字节(ZB，又称皆字节)、尧它字节(YB)表示。计算机存储单位一般用字节(Byte)、千字节(KB)、兆字节(MB)、吉字节(GB)、太字节(TB)、拍字节(PB)、艾字节(EB)、泽它字节(ZB，又称皆字节)、尧它字节(YB)表示。

-------------------------
gvim中，实现搜索。
gd 本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非注释段中第一次出现这个单词的地方.
/pattern 	文件中搜索符合此模式的文本或单词
n 	搜索同方向的下一个文本或单词
N	搜索反方向的下一个文本或单词

-------------------------

-------------------------

-------------------------

-------------------------

-------------------------

-------------------------

==================================================================
摘录
==================================================================
我发现在写TEX 文档时候，使用
\begin{verbatim}\end{verbatim}
环境时，
编译出来的pdf文件没有把Tab转成空格。 只要命令 set expandtab 即可,
这样在输入一个Tab时就相当于输入四个空格。 转载别人的使用经验. 
我在搜索 Tab 转化成空格时发现的。


vim 使用经验
先稍为介绍一下 vim. vi 是 unix/linux 下极为普遍的一种文本编辑器, 大部分机器上都
有. vi 有各种变种, 在不同的机器上常用不同的变种软件. 其中 vim 比较好用也用得比较
广泛. vim 是 Vi IMproved 的缩写, 表示更好的 vi. 我个人觉得它是非常好的编辑器(为
了避免 Emacs 粉丝挑眼, 就不说最好了). 没用过的也建议试试看, 当然 vim 对编写文本
文件很方便好用, 比如编写程序, html文档等等, 却不能用来编写 word 文档.

关于 vim 的安装, 基本使用方法等网络上能搜出许多, 就不在这里罗嗦了, 要是对 vim 有
兴趣, 那就看看这里(中文文档): http://vcd.gro.clinux.org/

本文就说些其中比较有用, 比较常用的命令, 若能熟练运用这些命令, 那么会发现编辑文件
很舒服.

说明:
以下的例子中 xxx 表示在命令模式下输入 xxx 并回车
以下的例子中 :xxx 表示在扩展模式下输入 xxx 并回车
小括号中的命令表示相关命令.
在编辑模式或可视模式下输入的命令会另外注明.

1. 查找

  /xxx(?xxx)      表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示
                  向上查找.其中xxx可以是正规表达式,关于正规式就不多说了.
                  一般来说是区分大小写的, 要想不区分大小写, 那得先输入
                  :set ignorecase
                  查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.

  *(#)            当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的
                  下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方
                  向查找.

  g*(g#)          此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而
                  是匹配包含该单词的所有字符串.

  gd              本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非
                  注释段中第一次出现这个单词的地方.

  %               本命令查找与光标所在处相匹配的反括号, 包括 () [] {}

  f(F)x           本命令表示在光标所在行进行查找, 查找光标右(左)方第一个x字符.
                  找到后:
                  输入 ; 表示继续往下找
                  输入 , 表示反方向查找

2. 快速移动光标
   在 vi 中, 移动光标和编辑是两件事, 正因为区分开来, 所以可以很方便的进行光标定
位和编辑. 因此能更快一点移动光标是很有用的.

  w(e)            移动光标到下一个单词.
  b               移动光标到上一个单词.

  0               移动光标到本行最开头.
  ^               移动光标到本行最开头的字符处.
  $               移动光标到本行结尾处.

  H               移动光标到屏幕的首行.
  M               移动光标到屏幕的中间一行.
  L               移动光标到屏幕的尾行.
  gg              移动光标到文档首行.
  G               移动光标到文档尾行.
  c-f             (即 ctrl 键与 f 键一同按下) 本命令即 page down.
  c-b             (即 ctrl 键与 b 键一同按下, 后同) 本命令即 page up.

  ''              此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查
                  找到某个单词后, 再输入此命令则回到上次停留的位置.

  '.              此命令相当好使, 它移动光标到上一次的修改行.

  `.              此命令相当强大, 它移动光标到上一次的修改点.

3. 拷贝, 删除与粘贴
   在 vi 中 y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令
结合的, 看几个例子就能够明白了.

  yw              表示拷贝从当前光标到光标所在单词结尾的内容.
  dw              表示删除从当前光标到光标所在单词结尾的内容.
  y0              表示拷贝从当前光标到光标所在行首的内容.
  d0              表示删除从当前光标到光标所在行首的内容.
  y$              表示拷贝从当前光标到光标所在行尾的内容.
  d$              表示删除从当前光标到光标所在行尾的内容.
  yfa             表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
  dfa             表示删除从当前光标到光标后面的第一个a字符之间的内容.

  特殊地:
  yy              表示拷贝光标所在行.
  dd              表示删除光标所在行.
  D               表示删除从当前光标到光标所在行尾的内容.

  关于拷贝, 删除和粘贴的复杂用法与寄存器有关, 可以自行查询.

4. 数字与命令
   在 vi 中数字与命令结合往往表示重复进行此命令, 若在扩展模式的开头出现则表示行
号定位. 如:

  5fx             表示查找光标后第 5 个 x 字符.

  5w(e)           移动光标到下五个单词.

  5yy             表示拷贝光标以下 5 行.
  5dd             表示删除光标以下 5 行.

  y2fa            表示拷贝从当前光标到光标后面的第二个a字符之间的内容.

  :12,24y         表示拷贝第12行到第24行之间的内容.
  :12,y           表示拷贝第12行到光标所在行之间的内容.
  :,24y           表示拷贝光标所在行到第24行之间的内容. 删除类似.

5. 快速输入字符
   在 vi 中, 不要求你输入每一个字符, 可以有很多种方法快速输入一些字符.
   使用 linux/unix 的同学一定有一个经验, 在命令行下输入命令时敲入头几个字符再按
TAB 系统就会自动将剩下的字符补齐, 假如有多个匹配则会打印出来. 这就是著名的命令
补齐(其实windows中也有文件名补齐功能). vi 中有许多的字符串补齐命令, 非常方便.

  c-p(c-n)        在编辑模式中, 输入几个字符后再输入此命令则 vi 开始向上(下)搜
                  索开头与其匹配的单词并补齐, 不断输入此命令则循环查找. 此命令
                  会在所有在这个 vim 程序中打开的文件中进行匹配.

  c-x-l           在编辑模式中, 此命令快速补齐整行内容, 但是仅在本窗口中出现的
                  文档中进行匹配.

  c-x-f           在编辑模式中, 这个命令表示补齐文件名. 如输入:
                  /usr/local/tom 后再输入此命令则它会自动匹配出:
                  /usr/local/tomcat/

  abbr            即缩写. 这是一个宏操作, 可以在编辑模式中用一个缩写代替另一个
                  字符串. 比如编写java文件的常常输入 System.out.println, 这很
                  是麻烦, 所以应该用缩写来减少敲字. 可以这么做:
                  :abbr sprt System.out.println
                  以后在输入sprt后再输入其他非字母符号, 它就会自动扩展为System.
                  out.println

6. 替换
   替换是 vi 的强项, 因为可以用正规表达式来匹配字符串.以下提供几个例子.

  :s/aa/bb/g      将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :s/\<aa\</bb/g  将光标所在行出现的所有 aa 替换为 bb, 仅替换 aa 这个单词
  :%s/aa/bb/g     将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :12,23s/aa/bb/g 将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :12,23s/^/#/    将从12行到23行的行首加入 # 字符
  :%s= *$==       将所有行尾多余的空格删除
  :g/^\s*$/d       将所有不包含字符(空格也不包含)的空行删除.

7. 多文件编辑
   在一个 vim 程序中打开很多文件进行编辑是挺方便的.

  :sp(:vsp) 文件名    vim 将分割出一个横(纵)向窗口, 并在该窗口中打开新文件.
                      从 vim6.0 开始, 文件名可以是一个目录的名称, 这样, vim 会
                      把该目录打开并显示文件列表, 在文件名上按回车则在本窗口打
                      开该文件, 若输入 O 则在新窗口中打开该文件, 输入 ? 可以看
                      到帮助信息.

  :e 文件名           vim 将在原窗口中打开新的文件, 若旧文件编辑过, 会要求保存.

  c-w-w               vim 分割了好几个窗口怎么办? 输入此命令可以将光标循环定位
                      到各个窗口之中.

  :ls                 此命令查看本 vim 程序已经打开了多少个文件, 在屏幕的最下方
                      会显示出如下数据:
                      1   %a      "usevim.html"         行 162
                      2   #       "xxxxxx.html"         行 0

                      其中:
                      1               表示打开的文件序号, 这个序号很有用处.
                      %a              表示文件代号, % 表示当前编辑的文件,
                                      # 表示上次编辑的文件
                      "usevim.html"   表示文件名.
                      行 162          表示光标位置.

  :b 序号(代号)       此命令将指定序号(代号)的文件在本窗口打开, 其中的序号(代号)
                      就是用 :ls 命令看到的.

  :set diff           此命令用于比较两个文件, 可以用
                      :vsp filename
                      命令打开另一个文件, 然后在每个文件窗口中输入此命令,就能看
                      到效果了.

8. 宏替换
   vi 不仅可以用 abbr 来替换文字, 也可以进行命令的宏定义. 有些命令输起来很费劲,
因此我把它们定义到 <F1<-<F12< 上, 这样就很方便了.这些配置可以预先写到 ~/.vimrc
(windows 下为 $VIM/_vimrc) 中, 写进去的时候不用写前面的冒号.

  :nmap <F2< :nohls<cr<              取消被搜索字串的高亮
  :nmap <F9< <C-W<w                  命令模式下转移光标到不同窗口
  :imap <F9< <ESC<<F9<               输入模式下运行<F9<
  :nmap <F12< :%s= *$==<cr<          删除所有行尾多余的空格.
  :imap <F12< <ESC<<F12<             同上

  :java 中: (注, 这里为什么说 java 中, 因为以下定义对其他文件格式不起作用, 下文
            会说到如何实现这一点)
  :nmap <F3< :comp javac<CR<:mak -d . %<CR<
       此命令用 javac 编译 java 文件, 它会自动将光标定位到出错点. 不过这需要定
       义一个 javac.vim 文件在 $VIM/compiler 下, 在 javac.vim 里面只有两行字:
          setlocal makeprg=javac
          setlocal errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#

  :nmap <F4< :comp ant<CR<:mak<CR<
       此命令用 ant 编译 java 文件, 它会自动将光标定位到出错点. 一般来说, 安装
       vim 后已经有了compiler/ant.vim文件, 因此这个命令可以直接使用. 但是需要
       在当前目录下有 build.xml 文件, 当然还必须安装 ant 才行.

  :nmap <F5< :cl<CR<                 此命令用于查看所有的编译错误.
  :imap <F5< <ESC<<F5<

  :nmap <F6< :cc<CR<                 此命令用于查看当前的编译错误.
  :imap <F6< <ESC<<F6<

  :nmap <F7< :cn<CR<                 此命令用于跳到下一个出错位置.
  :imap <F7< <ESC<<F7<

  :nmap <F8< :cp<CR<                 此命令用于跳到上一个出错位置.
  :imap <F8< <ESC<<F8<

  :nmap <F11< :JavaBrowser<cr<
       此命令用于在窗口左部分割出一个新窗口, 里面的内容是 java 的资源树, 包括
       本文件中出现的类, 类的成员变量及成员方法, 就好像 JCreator 表现的那样.
       在这个窗口中输入 ? 会看到帮助. 嘿嘿, 很好用, 不过需要 ctags 支持.
  :imap <F11< <ESC<<F11<

9. TAB
   TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.

   <<                  输入此命令则光标所在行向左移动一个 tab.
   <<                  输入此命令则光标所在行向右移动一个 tab.
   5<<                 输入此命令则光标后 5 行向右移动一个 tab.
   :12,24<             此命令将12行到14行的数据都向右移动一个 tab.
   :12,24<<            此命令将12行到14行的数据都向右移动两个 tab.

   那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
   有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
   帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.

   :set shiftwidth=4   设置自动缩进 4 个空格, 当然要设自动缩进先.
   :set sts=4          即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
   :set tabstop=4      实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
   :set expandtab      在输入 tab 后, vim 用恰当的空格来填充这个 tab.

motioo补充：把编辑的文档30到50行中的Tab替换成4个空格的名利是 :30,50s/\t/    /g

10. autocmd
    这个命令十分的强大, 可以用这个命令实现对不同的文件格式应用不同的配置; 可以
在新建文件时自动添加上版权声明等等. 这些命令一般定义在 ~/.vimrc 这样的配置文件
里面. 由于他很强大, 所以我不能给出很具体的说明, 只能举几个例子, 详细的请看帮助.

  :autocmd!               删除所有之前的自动命令.
  autocmd FileType        java  source ~/.vim/files/java.vim
  autocmd FileType        java  source ~/.vim/files/jcommenter.vim
    以上两条命令让我在打开 java 文件时才应用后面提到的两个配置文件.
  autocmd BufNewFile      *.java  0r ~/.vim/files/skeletons/java.skel
    以上这条命令让我在新建 java 文件时自动加入 java.skel 文件的内容.
  autocmd BufNewFile      *.java  normal gnp
    以上这条命令让我在新建 java 文件时自动运行 gnp 命令, 这个命令进行一些特殊化
    处理, 比如将新 java 文件中的 __date__ 替换成今天的日期什么的.

11. 常用脚本
    在 vim.sf.net 你可以发现很多脚本(script), 这些脚本常常有让你意想不到的作用.
我常用的有:

    jcommenter.vim        自动加入 javadoc 风格的注释.
    JBrowser.vim          类资源浏览. C, C++ 等可以用 Tlist

    还有许多有用的, 比如 checkstyle.vim 可以检验你的编程风格, jad.vim 可以直接
    反编译 .class 文件等等.

12. 常用配置
    在~/.vimrc 配置文件中你常常需要一些个性化配置. 比如上面写的一些宏定义, 一些
autocmd 定义等等. 比如:

    set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.lof,.log,.lot,.ps,.toc
        这样在vim中打开文件时, 按 tab 键补齐文件名时它会忽略上述文件.

    set nu          显示行号
    set ai          设置自动缩进
    map Y y$        让 Y 和 D 一样, 要不然 Y 的本意和 yy 一样.

13. 其他
    还有许多有意思的命令, 记录在这里免得忘记.

    .                                               重复上次编辑命令.
    :g/^/exec "s/^/".strpart(line(".")." ", 0, 4)   在行首插入行号
    :runtime! syntax/2html.vim                      转换 txt 成 html, 会按照你的
                                                    颜色配置来转


14. 重复做一组操作的宏

在命令模式下，输入qa 则定义了一个名字为a的宏。a 可以换成其他25个英文字母。

输入qa 所有的操作都被记录下来，直到输入q后记录结束。然后可以使用@a 来执行

a记录的操作。也可以用 3@a 来执行3次q记录的操作。

下面是一个例子，看看宏是怎样应用的。

利用我们有这样几行

stdio.h

fcntl.h

unistd.h

stdlib.h

我们想把他们改成下面的样子：

#include “stdio.h”

#include “fcntl.h”

#include “unistd.h”

#include “stdlib.h”

我们现移动到第一行，然后执行命令

qa 开始记录宏操作

^ 移动行首

i#include “<Esc< 在行首处输入#include", 然后敲击Esc 回到命令行模式.

$ 移动到行尾.

a”<Esc< 在行末插入",然后敲击Esc回到命令行模式.

j 移动到下一行.

q 停止记录宏.

现在可以敲击命令 @a, 或者 3@a 来执行宏中的操作。



15. 用VIM (vim, gvim)写程序的时候:

gd 可以到找到光标处的变量的原始定义。

Ctrl+D 可以到光标处的宏定义的地方  #define 定义的宏
 
代码折叠
-----------------------------------------------
set foldmethod=syntax " 用语法高亮来定义折叠
set foldmethod=indent " 更多的缩进表示更高级别的折叠(这个似乎效果好一些)

zo 打开折叠，也可以用方向键(左右键)打开折叠
zc 关闭折叠(只要在被折叠的块中的任一个语句就行)
zC 对所在范围内所有嵌套的折叠点进行折叠
zO 对所在范围内所有嵌套的折叠点展开

    当使用marker方式时，需要用标计来标识代码的折叠，系统默认是{{{和}}}，最好不要改动之。可以使用下面的命令来创建和删除折叠：

zf   创建折叠，比如在marker方式下：
     zf56G，创建从当前行起到56行的代码折叠；
     10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
     10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
     在括号处zf%，创建从当前行起到对应的匹配的括号上去（()，{}，[]，<>等）。

zd   删除(delete)在光标下的折叠。仅当'foldmethod'设为"manual"或"marker"时有效。
     : set foldmethod (查看当前foldmethod设置，vim默认设置为manual)。
zD   循环删除(Delete)光标下的折叠，即嵌套删除折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。
zE   除去(Eliminate)窗口里"所有"的折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。


切换窗口
-----------------------------------------------
用<C-W><C-W>切换当前窗口
当同时打开几个文件时，按<C-W>_使当前窗口最大化

<C-W> = ctrl+w


[+I显示文件中包含光标下<word>的所有行。我常用来浏览某个id在程序中的引用情况。[+I (大写I)


dfx   表示删除到下一个出现x的地方，x可以使任意字符。



%
--------------------------------
%用来匹配块
如果你的光标在类似([{}])或者#ifdef #else #endif上，输入%将把光标跳转到相应的匹配符号上去。

%还可以用来指定命令范围，如果你想把一个
{
    ...
}
的块全部删除。
可以先把光标移到{再敲d%

如果你想把一个块(包括{})全部往里缩进一个tab
可以把光标移到{敲>%

可以把光标移到{敲=%就是缩进一个块

===============================================================================