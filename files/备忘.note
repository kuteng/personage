1  Grid的展现效率，后台运算量。1天。
2  Grid的打开效果。
3  重写Tree方法 + 搜索逻辑。
4  Ajax上传文件。
5. 布局。
6. Grid上的缩进。

备忘：
1. sysData: 背景颜色的验证，及“#”号不能被删除
2. 5.5切换到6.0时，可能重现system没有出来的Bug。
3. 上传文件，加图片。图片在UI中:[UI]/gif/fileUploading.gif
4. 5.5, 5.6：当隐藏“home+logout”时，adminTitle布局会变乱。—— 火狐
5. tomcat热启动


本周任务：
周四：门户进入系列页面
周五：解决定时任务与其他页面冲突的问题。

===============================================
技巧性使用svn checkout代码。
cd G:\YH
svn checkout --depth=empty svn://venus/mnt/sda3/SVNRepository/project/bi codes
cd codes
svn up --depth=empty trunk branch
cd trunk
svn up src
...
...
这样就可以避免冗余的检出了！

===============================================
svn 提交，选择性提交
   G:\YH\codes>svn status -q > modified.note
   G:\YH\codes>vim modified.note
   G:\YH\codes>svn ci --targets modified.note

相关知识——vim在window如何进行列编辑。
   删除列：Ctrl-q，然后选择适当的矩形区域，然后按d。

svn 显示远程目录列表
   svn list

===============================================
DOS 创建目录
   md folderName

dos 操作的历史文件
   环境变脸%dos%，如：svn status -q %dos%

===============================================
Tomcat 热启动。
config/context.xml
   <Context reloadable="true">
config/server.xml
   <Host name="localhost" debug="0" appBase="webapps" unpackWARs="true" autoDeploy="true" xmlValidation="false" xmlNamespaceAware="false">
   在host节点内加入: <Context path="/trunk" docBase="trunk" debug="99" reloadable="true"/>
如此即可

===============================================
持续集成工具U：
   Jenkins, 其前身为hudson。
===============================================
Vim 获得函数列表。
   :Tlist 打开或关闭函数列表

Vim 探索当前文件所在目录
   :Explore[!]

Vim 返回浏览器
   :Rexplore[!]

Vim 更改
   g:netrw_keepdir，缺省为 1。该设置意味着当前目录不会跟踪浏览目录。为 0 告诉 netrw 使 vim 的当前目录跟踪 netrw 的浏览目录。
   c  在目录中按“c”看是浏览目录设为当前目录。

Vim 标记文件
   mf 标记文件

===============================================
vim 自定义宏
@n：添加注释。
@2：消除注释。

[n]G     跳转到指定行。
:[n]     跳转到指定行。

gj       跳转到下一折行（一行内）
gk       类似

关于tab
   :tabn[n]  切换指定tab
   :tabs     列出所有tab
   gt        切换tab

   424,456 s/span/div/g 替换从424行到456行出现先的所有span，改为div。
   424,456 s/\<span\>/div/g 替换从424行到456行出现先的所有单词span，改为div。其中"\<"表示单词的开头，"\>"表示单词结束

   R        替换字符，知道按Esc为止

u        恢复上一个操作
cw       更改光标所在处的字到字尾$处
#w    如：c3w代表更改三个字。

Ctrl + G 列出所在行行号。
#G       如13G，跳到十三行
:cddirectory 将当前工作目录更改为directory所表示的目录
:map     在状态行显示所有已定义的宏。
:umapkey 删除该键的宏。

q:    打开命令行历史记录
:pwd  查看当前工作路径。
:r !grep -S someString *.html
===============================================
white-space:   css属性，作用于html中的空白
===============================================
目录中的操作：
a     隐藏/显示文件和目录
X     执行某个文件   newtrw-W
gf    打开文件方式打开目标
gd    打开目录方式打开目标
x/gx  使用系统管理器打开目录
o     新开一个窗口打开文件（上方）。
t     新标签打开目标
v     新开一个窗口打开目标（left）
p     在预览窗口打开。
P     在上一个窗口打开
i     修改文件列表系统
u     回到之前的目录
U     ...

mb,gb,mB,qb    netrw-mb, metrw-gb

:12Vexplore 左侧垂直打开文件文件浏览器

:help netrw-mf    查看mf的后续用法
:ve         得出一个似乎很有用的结果

<cr>  表示换行符

:e    兼有搜索功能，可惜我不会用。请查看:help Explore
      提示，正则表达式可能需要这样写：\.[ch]$

操作备忘
Ctrl - T 调回刚才的标签Tag
Ctrl - O 调回刚才的标签Tag

修改本地化帮助配置。
:h help


===============================================
[[ = 移动到前一个行首的'{'字符上， 等价于?^{
]] = 移动到下一个行首的'{'字符上， 等价于/^{
[] = 移动到前一个行首的'}'字符上， 等价于?^}
][ = 移动到下一个行首的'}'字符上， 等价于?^}
{ = 到前一个空行上
} = 到下一个空行上
gd = 到当前局部变量的定义处(当前的意思是光标停留其上的单词).
* = 到与当前单词相同的下一个单词上
# = 到与当前单词相同的上一个单词上
'' = 到上次光标停靠的行

===============================================
SVN快捷
查看某历史版本的修改：svn diff -r ridx:(ridx-1)，如：
   svn diff -r 27558:27557

===============================================
vim切换标签
   [n]gt    其中n为标签的id。

vim删除缓冲区
   :bd[n]    其中n为缓冲区idx，注意：Vim还是会记住它. 实际上它被打入"unlisted"列表中":buffers!"(或":ls!")还是会让它再度现身。
   :bwipe    彻底删除一个缓冲区，具体查看buflisted。应该可以简写为“:bw[n]”

===============================================
备忘记事

完善svnpeter。
   如何构造如：svnpeter -r h -t v -l 20 这样的命令。
   dos中，如何判断第n个参数是否为空？

===============================================
台式机操作
将系统变量Path中[Git]/bin;改为了[Git]/cmd;。

因为git中的grep.exe与grep-windows中的grep.exe冲突。而且[Git]/bin/grep.exe并不好使。——但我在dos中，直接使用grep命令时。
但是这样就用不了git grep命令了。

当然我也可以将grep-windows中的grep.exe改为wgrep.exe。

===============================================
svn 中depth各个取值的意义。
代表四种检出深度：
 
1、Fully recursive——全递归：检出完整的目录树，包含所有的文件或子目录。
2、Immediate children,including folders——直接子节点，包含文件夹：检出目录，包含其中的文件或子目录，但是不递归展开子目录。
3、Only file chlidren——仅文件子节点：检出指定目录，包含所有文件，但是不检出任何子目录。
4、Only this item——仅此项：只检出目录。不包含其中的文件或子目录。

===============================================
169MB
182MB
===============================================
今天和chenny的讨论，教训：
   有问题我就应该直接了当的说出来，在他说window.name的默认值是null时，我就应该直接站出来反对，window.name的默认值是""，而不是“委婉”的找个所谓的间接方法。

===============================================
定时任务与其他页面的冲突，应该是对我的一个挑战，我应该去迎接它，而非逃避。


===============================================
JavaScript中foreach的语法如下，其中，dix为数组data的下标。
   for(var idx in data) {

===============================================
fx：移动光标到当前行的下一个x处。很明显，x可以是任意一个字母，而且你可以使用;来重复你的上一个f命令。

===============================================
http://easwy.com/blog/archives/advanced-vim-skills-netrw-bufexplorer-winmanager-plugin/
浏览文件夹
   :e console/

:ls 可以查看当前打开的缓冲区。然后使用“b[n]”打开指定缓冲区

vim 调用系统变量“:e $gitFolder”
vim 文件浏览器：“:edit .” “Explore” 或者 Ctrl-O

Vim中，~是什么意思？“:e ~src/vim70/src/”并没有打开目录

===============================================
 :split/vsplit                分隔一个窗口 
 :sf {filename}            在新窗口中打开filename 
 :ctrl+z/suspend 在shell下是挂起vim; gui下是最小化窗口 
 :shell  开一个新的shell 
 :mksession session.vim      保存当前vim状态 
 :source session.vim         回复vim状态
 vim -S session.vim         启动vim时恢复session 
fx：移动光标到当前行的下一个x处。很明显，x可以是任意一个字母，而且你可以使用;来重复你的上一个f命令。 
b： 光标往后移动一个词。 
)：移动光标到下一个句子。 
<C-F>：向下移动一屏。 
<C-B>：向上移动一屏。 
numG：移动光标到指定的行（num）。（比如10G就是到第10行） 
H：移动光标到屏幕上面 
M：移动光标到屏幕中间 
L：移动光标到屏幕下面 
*：读取光标处的字符串，并且移动光标到它再次出现的地方。 
`.：到你上次编辑文件的地方。这个命令很有用，而且你不用自己去标记它。 
比如：c$，这将会删除从光标位置到行尾的字符并且进入插入模式。ct！， 
v：按字符选择。经常使用的模式，所以亲自尝试一下它。 
V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。 
比如，vwww，会高亮光标前面的三个词。Vjj将会高亮当前行以及下面两行。 
y{motion}：和上面类似，不过是拷贝。 
D：剪切从光标位置到行尾到剪贴板。 
比如：我们要拷贝当前行到寄存器k。你应该按 "kyy。 
3j 将会把光标向下移动三行。 
10dd 将会删除十行。 
比如qa，将会记录并且把宏存在寄存器a里面。 
q：结束宏的记录。 
@register：使用存在寄存器register的宏。比如@a，将会使用存在寄存器a里面的宏。 
]p：和p的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置。试一下！ 
%：匹配花括号，方括号，括号等。在一个括号的上面，然后按%， 
>>：缩进所有选择的代码 
<<：和上面类似，但是反缩进 
K：在Man里面查找光标当前所在处的词。 
:marks　　查看当前设置的所有标签。
``    返回跳转之前的标签。

===============================================
VIM 读书笔记
   :e fileName 实际上可以是edit的简写
   :w 是write的简写
   :e! fileName 可以强行对齐当前修改，进入新文件
   :hide edit fileName 这样可以打开新的文件同时，将当前编辑的文件放入缓冲区（即使它没有被保存）

   vim file1 file2 file3 这样可以在启动vim是编辑多个文件。当然，打开vim后，只会显示一个文件。
   :next 之后可以通过此命令，切换到下一个文件。但在此之前，需要保存之前修改。
   :wnext 保存并切换到另一个文件。
   类似的命令还有：previous, wprevious, last, first, 2next.

   :args 可以查看整个文件列表中有几个文件。此命令为arguments的简写。
   :args files 可以重新定义文件列表

   :set autowrite(noautowrite) 设置自动存盘或者禁用自动存盘。

   Ctrl + ^可以在两个文件之间切换。

   `" 到上次你离开当前文件光标所在位置。
   `。最后一次对当前文档进行的改动处。

   mx("x") 作为标记，只在本文件内生效。m为mark的缩写，应该是。
   mX 即使用大写字母，他们为全局标记
   做标记的技巧：
      50%mF:   在文档中间做标记
      GmB:     在文档最后做标记
   :marks M 查看标记M的内容
   :marks MCP 查看标记为M, C, P的内容

   :set backup 设置备份
   :set backupext=.bat  设置备份的文件后缀。

   :set patchmode=.orig  设置备份原始版本文件后缀。如果为空，则原始文件备份不会执行。

   vjjjj$y  选择内容并复制。
   V     当前行单行复制。
   yaw   即yank a word，复制一个单词。
   yas   复制一个句子。

   p     将粘贴内容放在光标之后。
   P     将粘贴内容放在光标之前。
   
   "fyas 复制一个句子放入寄存器f
   "l3Y  复制单行放入寄存器
   "fp   将寄存器f中的内容粘贴出来
   "wdaw 删除一个word，并将它粘贴到剪切板w。

   :write >> logfile   将当前文件的内容，追加到文件logfile。
vim -R file 以只读模式运行vim。 vim -M file 此模式（viewer）下，任何对文件的修改都会报错。 但在viewer下，下面两个命令可以解除这里两层限制。 :set modifiable :set write 
   :saveas fileName  另存为。
   :file fileName    重命名。

   分隔窗口。
   :split
   Ctrl-w w  切换窗口，和Ctrl-w Ctrl-w 一样。
   :close   关闭当前窗口。
   :only    关闭出当前窗口外的所有窗口。
   :split fileName
   Ctrl-W +    增加当前窗口高度
   4 Ctrl-W +  增加当前窗口4个高度。
   6 Ctrl-w _  设置当前窗口的高度
   winheight, winminheight, winwidth, winminwidth。

   Ctrl-w = 所有窗口平均分配。
   Ctrl-w > 当前窗口宽度增加。
   Ctrl-w < 当前窗口宽度减少。
   Ctrl-w | 当前窗口宽度调到最大。

   :vsplit  垂直分割。
   :vnew
   Ctrl-w [h, j, k, l, t, b]

   Ctrl-w K 将当前窗口向上提升一次
   类似命令还有Ctrl-w J, Ctrl-w H, Ctrl-w L
   :qall
   :wall
   :wqall
   :qall!

   vim -o file1 file2 file3   水平分割。
   vim -O file1 file2 file3   垂直分割。

   vimdiff file1 file2

   :vertical diffsplit main.c 分割一个垂直窗口，一比较当前文件与main.c的不同
   :set noscrollbind 禁用同步滚动

   ]c    跳到下一个不同之处。
   [c    跳到上一个不同之处。

   :diffupdate
   dp
   do

   页签？

   gf    需要作用在文件名上。
   :find 后加文件名。
   :set path=.   设置搜索的范围
===============================================
自定义快捷键
Ctrl + Alt + F1: Vim
Ctrl + Alt + F2: UE
Ctrl + Alt + F3: MyEclipse
Ctrl + Alt + F4: DOS
Ctrl + Alt + F5: Chrome
===============================================
：
d     删除当前光标所在buffer
:bn   切换到下一个buffere
:bp   切换到上一个buffer
:b[n] 切换到第N个buffer

===============================================
命令行中
grep --help 是得到帮助信息
===============================================
Windows系统，可以通过Win + [num]快速实现窗口切换
以后尽量保证这样一个顺序：
   1. gvim
   2. dos界面
   3. 浏览器
   4. MyEclipse
   5. 文件系统
   6. UE

谷歌浏览器
   Ctrl + Tab：切换标签页

vertical-align
   sub:  垂直对齐文本的下标 —— 使图片对齐文本，我用它居然可以！
   super：  垂直对齐文本的下标
===============================================
应该找个机会，让系统可以传输二维数组，在系统如下地方，我们都是通过间接方式做到的。
   系统设置。
   adminTitle的menu列表的遍历。


=====================
local key:
   index.system
   旧的三个模块的local.
   Audit
   LOGSHOW
   Data
   Security
   asset.import
   asset.export
   system.description
   $.AssetRef.ACTION_MANAGE 等是否删除

===========================
对于任务界面的设计，不能那么做，不然我就相当于维护两套设计了。
大阅兵进入倒计时 航天军工等三类概念股显露“升”机:中航机电




家里太有钱，老是担心被偷，于是我把wifi 修改成无密码，然后放心上班，每天回家看到十几个蹭网的蹲我家门口帮我看门！
当年楼主幼儿园毕业的时候表演节目合唱（世上只有妈妈好）上台前老师把每个人屁股都打了一巴掌，还不准我们哭等到上台越唱越委屈，边唱边哭，感动了全场观众，掌声雷动。
小学老师和一位家长谈话，有了你的儿子，我上课可以不用看表了，看他一眼就知道时间了。第3分钟开始用胳膊支着头，第5分钟开始玩笔，第10分钟开始趴在桌上了，第15分钟那就肯定睡着了……最厉害是下课前3分钟一定会醒来收拾文具盒，然后我就知道快下课了，我也准备做收尾工作了。家长一脸黑线……
甲：“你为什么长这么矮” 已：“因为我恐高” 甲：“你长这么矮，有什么感觉吗” 已：“让所有人见了我，都台不起头” 甲：………………
一奔驰s600正转弯，一老奶奶突然车旁倒下，只看到奔驰车主下来脸都白了。我看到这一幕，掏出100块钱扔在地上，大声说道“大妈你钱掉了”大妈急忙起来拿着100块走了，看着大妈远去的背影，奔驰车主感激的跟我说“哥们今天多亏你了”说着硬往我手里塞了800块，看着远去的奔驰，我掏出电话“奶奶，下一个路口…………”时代在改变，营销手段必须创新
在游泳池戏水，旁边一小萝莉。突然想放屁，没憋住，身后冒起一大串泡泡。旁边小萝莉哇的一声哭了，边哭边喊：麻麻，麻麻，快跑，水开了……
妈妈劝我不要再抽烟喝酒了，不然体检的时候一定会查出病来的。听从了妈妈的话，我就再也没去体检过。
有人问到“你们学校有多大”，我们没回答，只是给他说了一个故事，前门卖饼的大叔向后门卖粉的阿姨求婚，阿姨没答应，原因是受不了异地恋
小学时上语文课，语文老师讲到海纳百川，有容乃大这句名言。小明站起来问：“老师，有容是谁。”老师说：“你出去。”
"某好友说：“这十几年来我辛辛苦苦的逢考必抄,为了什么，难道是为了我自己吗？还不是为了提高班级的均分,为了任课老师的面子，为了年级主任的评先评优，为了校长去教育局开会有面子扎台型。每次抄的心惊胆战，满身虚汗，我有说过一句怨言吗！无私到这个地步你还要我怎样！”"
在朋友口中得知前女友过得不好，心里挺过意不去，毕竟是我甩的她，便打电话问她：“过得好么？”前女友道：“不好！”我便又问道：“还恨我么？”前女友又道：“我一直都不恨你，只是每次听见死人的时候，我便上前去看是不是你！”
指南针在路上边走边哭！ 路人感到很奇怪，便问它为什么哭？！ 指南针伤心的说：“我怎么找不着北啊？”..
今天我和我姐讨论谁漂亮些，我拉过来小外甥：我和你妈谁漂亮些，你说实话，我保证不打你！小外甥面带苦相的说：小姨，你还是打我吧！！！我：………………
列车上乘务员态度不好，用手机开了个热点，名字叫做“免费WIFI密码问乘务员”……她已经被烦死了……
"甲：你年薪多少?乙：96万.甲：那一个月有8万哦!乙：是的,这是基本工资.甲：不错嘛,做什么的?乙：做梦的......"
小明狠狠的说道：“对方辩友，你倒是说话啊，无言以对了吧！ ” 主持人：“把手松开！憋死他不算！ ”
“专家”建议取消3天以上长假，我建议取消“专家”
最喜欢你看不惯我，又拿我没办法的样子。
“你经历过最歧视的事是什么”。“56个民族55个加分。”
甲：你的身材怎么保持得那么好？乙：靠跑路甲：那么怎样才能保持跑路的习惯呢？乙：靠欠债
昨晚坐火车偶遇两个老外坐我对面，大晚上的无聊就跟他们PK英语一直P到他们困得受不了了才结束，但也没出胜负来！别问我为什么会是平手？…………………原因是他们说的我一句没听懂，我说的他们也一句没听懂…………
好不容易习惯了自己的长相，理个发又换了种丑法。
"悟空！休得无理！老人家，贫僧乃东土大唐而来，路过贵地，不知老人家可否大开方便之门…老人家，请莫再辱骂，贫僧替大徒儿道歉……老人家，请莫再用手杖杵贫僧……老人家请息怒……老……老家伙！你再动我一下试试！哎呀！悟空！削他！八戒悟净你们也上，牙敲掉眼扎瞎腿打折！善了个哉的！
老师“下面我点到名的同学都可以获得两百元奖学金。”刚一说完“啪”小明直接一本书飞向老师。老师怒声吼到“王小明。”小明起身摊手道“老师，我的奖学金呢！”
刚接一电话，张嘴就问 “哎你在家呢么？” 号码陌生但这语气肯定熟人啊，不知道是谁还怕尴尬，于是也装熟回他 “嗯，我周五还能在家？饭局啊！一到周五就这样，好几个局呐，你在哪儿呢？咋了，啥事？ 对方沉默一会说 “你叫的外卖，我在你家门口呢。”
飞机场安检处。。。前面一哥们背一书包。。。安检员问”有电脑吗？”哥们答”有”安检员”拿出来”哥们答”在家呢”在家呢。。在家。。安检员一脸黑线。。。
大学的，一次考试，大家都很自觉，偷摸的在底下抄。但是也都不敢乱来，唯独第一排一奇葩，把书都拿出来了，就放桌子上抄。老师走过去踢了一脚那哥们桌子，说了震惊满场的话：滚最后一排抄去，一点技术含量没有还跑第一坐来了，影响多不好……
画家死后，他的经纪人始终有新画出卖。一日酒后终于吐露真言：“嘘……他还在画室画呢，我没告诉他他已经死了。”
饿狼觅食，听见有家人在训孩子：“再哭就把你扔出去喂狼！ ”可是，孩子哭了一夜……第二天早晨，狼长叹一声：“哎……人类说话不算数！
今天早上老婆洗澡，洗完浴室里全是雾，谁知这个二货在吹头发的时候突然念叨：“魔镜魔镜，谁是这个世界上最漂亮的女人。”接着她就拿电风吹对着镜子猛吹一通，镜子里逐渐出现她的脸……
老师:“用一句话证明你是学渣。”小明:“看我的年级排名就知道有多少人参加考试…”
医生正准备给男子动手术，男子不放心的看了医生一眼。突然，男子惊恐的滚到床底哭嚎到：“快给我换医生！他的文凭我办的！ ”
两头牛在一起吃草，青牛问黑牛：“喂！你的草是什么味道？”黑牛道：“草莓味！ ”青牛靠过来吃了一口，愤怒地喊到“你骗我！ ”黑牛轻蔑地看他一眼，回道：“笨蛋，我说草没味。
塞翁丢了一匹白马，邻居们纷纷来安慰他，塞翁说：这并不是一件坏事对吗？果然，第二天，白马回来了，还驮回来唐僧，于是大家集体吃了唐僧，邻居又来恭喜塞翁，塞翁说：这说不定不是件好事！第三天，家里来了只猴…
男：“老婆，等你三十了我就送你一辆车。”女：“真的？”男：“真的，不过老婆，你在我心中永远十八！ ”
本人姓孙，父亲希望我能比孙中山还要厉害两倍，于是给我取了个名字：孙串出。 呵呵， 心好累…
前段时间家附近的咖啡店突然挂出了一块牌子：“对不起，本店没有WIFI，请和你身边的人多多交流”，瞬间击中内心，觉得真棒，早该这样干了。今天老友来看我，就带她去这个咖啡店坐坐，心想没wifi 终于可以好好维系维系感情，到了的时候一看，草 倒闭了。
一个幼儿园比赛，3个班，各班有各班口号。 1班是：“小一小一，永远第一。” 2班是：“小二小二，独一无二。” 3班把口号喊出来，把全场都笑翻了。 ：小三小三，爸爸喜欢。”
"老公这两天有点嚣张，总对我指指点点的，昨晚我趁他不注意给钱包装两个套套。今天早上上班的时候我说要点钱，结果就翻出了套套，终于翻身了！果断发飙~"
找女朋友就应该找一个不爱化妆的！偶尔画一次！感觉会怦然心动，要是找一个总化妆的！偶尔不画一次！容易猝死啊！！
小红:为什么我把手机调成飞行模式，从楼上扔下来却还是摔坏了？小明:很明显，楼下有人打飞机！
奥特曼有一天在上课，有问题，于是举手……老师死了……
老公给我洗头，水有点烫，我就让他把水温调低点，一会后，他问我水温可以了吗，我觉得还可以就说了，好了，就这温度，老公：就知道你tm的矫情，老子根本没碰它。
教室里，小明把头靠在椅子上，不听课。老师关心的问：“你又生病了？”小明头也不抬的说：“是的，头疼。”老师说：“你有医生证明吗？拿出来你就可以回家休息了！”小明说：“就是因为医生不开证明，所以头疼。”老师：“滚出去…”
上小学时老师让写一篇关于做家务的作文，反复强调要真实，不知道大家那会有没有要求这样的。周一老师让一同学读，他读到：晚饭后我要帮妈妈洗碗，妈妈说滚一边玩去，我说老师让我做的，我妈说你们老师逼儿事真多……这是我听到的最真实的作文
姐姐买了条裙子，老妈说："拿过来，让我试试看能穿上不。" 结果腰太紧，费了半天劲才勉强穿上。 姐姐在边上心疼的说："妈，你把我的新裙子都撑大了！" 老妈："不就是裙子嘛，当年你把我的肚子还撑大了呢。"






1. 修改adminTitle.html界面，恒定绑定中间灰色条。
2. 监控系统的左侧列表，Tree需要怎么获得？
3. 日志管理

问题
1. 中间横条（灰色），需要与计划任务一样。
2. 如果二级管理员登录系统，他只有访问“认证授权”的权限。其他两个模块怎么处理，消失或者不可用？

================================================================
FAuthentication.java: 488
UserRep.java
SecureReq.java

================================================================
工程里的标记是：
// @temp by peter

================================================================
突然发现，我对产品添加新功能有很强烈的抵制情绪，怎么会这样？什么时候出现的？怎么消除它？
这似乎与我长时间处于被动地位有关系。我应该怎么调整过来？
我应该自己总结产品不断添加的新功能。既然在这个过程中，我无法于参与中得到积极的情绪，我就用从学习总结中得到的满足感来填补它。

================================================================
产品的功能。
   权限管理中，添加了统计功能。使用dashboard，将用户具有哪些角色、角色被赋予哪些用户等都暂时出来了。
   讲一些常用配置项从bi.properties中移到了界面中。
   当用户登录界面发现licence过期是，出现新的弹出框，让用户输入新的licence。而不是让用户其bi.properties中配置。

================================================================
在AbstractRep.java中，方法Asset: getAsset()方法并不好。
起因（Bug-10772）：
   二级管理员groupUser，删除其“上级组G2的上级组G1”时，其判断逻辑应该如下：
   ------------------------------------------------------------
   首先需要获取G1的对象，
   然后判断用户是否对G1的上级组G0有写权限，如果无此权限则报错。
   ------------------------------------------------------------
   而现在，用户groupUser获取G1对象时，使用的是读权限（GroupUser对G1没有读权限），导致取不到对象，并报错。groupUser获取G1对象时，应该不需要验证权限。

================================================================
其他人的工作如UI其实也很累。

================================================================
在vim的_vimrc文件中代码“nmap wm :WMToggle<cr>”是失效的

=================================================================================================================================
修改C:\windows\gvim.bat,源文件已备份：gvim-副本.bat1
将start "dummy" /b "%VIM_EXE_DIR%\gvim.exe"  %*
改为 start "dummy" /b "%VIM_EXE_DIR%\gvim.exe"  %cd%/%*

=================================================================
如果需要查看修改的文件的话：svn log -l 20 -q -v
查看远程log：svn log -r HEAD:BASE -q -l 20
         svn log -r head:base -l 100 --search peter
获取URL  svn info | grep -i 'url'

=================================================================
文件浏览器排序规则：

netrw.vim
let g:netrw_sort_sequence=

=================================================================
[diff]
   tool = bc3
   external = bcompare
[difftool]
   prompt = false
[difftool "bc3"]
   #use cygpath to transform cygwin path $LOCAL (something like /tmp/U5VvP1_abc) to windows path, because bc3 is a windows software
   #cmd = \"c:/program files/beyond compare 3/bcomp.exe\" "$(cygpath -w $LOCAL)" "$REMOTE"
   cmd = \"C:/Program Files (x86)/Beyond Compare 4/BCompare.exe\" "$(cygpath -w $LOCAL)" "$REMOTE"
[merge]
   tool = bc3
[mergetool]
   prompt = false
[mergetool "bc3"]
   #trustExitCode = true
   #cmd = \"c:/program files/beyond compare 3/bcomp.exe\" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
   cmd = \"C:/Program Files (x86)/Beyond Compare 4/BCompare.exe\" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

在[git]/etc/gitconfig文件内添加如下内容：
----------------------------------------------

[diff]
   external = bcompare
----------------------------------------------
此方法只能是比较实用bcompare，不能使合并使用bcompare！

[diff "astextplain"]
   textconv = astextplain
	
==================================================================
2015年8月16日：笔记本

下载了新的git仓库。
https://github.com/gmarik/vundle.git
https://github.com/derekwyatt/vim-scala.git

--------------------------------------------------
如何给gvim添加新的编译器呢？我要添加的是sbt编译器。
sbt是针对java和scala的编译器。那么scala也自带编译器吧！

--------------------------------------------------
UltraEdit中，突然粘贴复制不好使，可能是无意中按了快捷键“Ctrl + [NUM]”，激活了Windows中的其他剪切板。

--------------------------------------------------
Windows
关闭窗口：Alt + F4

--------------------------------------------------
Chrome
切换标签使用：Ctrl + [NUM].
快速定位地址栏使用：Ctrl + L 或 Alt + D
关闭标签页使用：Ctrl + F4
打开主页：Alt + Home

--------------------------------------------------
gvim 快捷键
上翻页：Ctrl + b
下翻页：Ctrl + f

0  是数目字 0 而不是英文字母 o。或是 Hmoe 键，移至行首，

//取自正则表达式：^为开始，$为结束。
^  移至行首（第一个非空白字符），注意，要 Shift 键。
$  移至行尾，或 End 键。要 Shift 键。

// 取自goto
G  移至文档尾，最后一个非空白字符。
gg 移至文档头，第一个非空白字符。

w  移至系一个字(word)字首
W  同上，但会忽略标点。
b  移到上一个单词。

:n 移到第n行行首。或nG
n| 移到第n个字元(栏)处。

)  移到下一个句子
(  移到上一个句子
}  移到下一个段落
{  移到上一个段落

gvim粘贴复制
p  粘贴
y  复制（我没有搞清楚它复制的范围呢）
yy 复制一行
u  撤销
Ctrl + r 重做
.  重复上一次修改

gvim中，实现搜索。
gd 本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非注释段中第一次出现这个单词的地方.
/pattern 	文件中搜索符合此模式的文本或单词
n 	搜索同方向的下一个文本或单词
N	搜索反方向的下一个文本或单词

--------------------------------------------------
计算机存储单位一般用字节(Byte)、千字节(KB)、兆字节(MB)、吉字节(GB)、太字节(TB)、拍字节(PB)、艾字节(EB)、泽它字节(ZB，又称皆字节)、尧它字节(YB)表示。计算机存储单位一般用字节(Byte)、千字节(KB)、兆字节(MB)、吉字节(GB)、太字节(TB)、拍字节(PB)、艾字节(EB)、泽它字节(ZB，又称皆字节)、尧它字节(YB)表示。

--------------------------------------------------
DOS模式显示正确中文文件名
  【实现目标】 操作系统是Windows 98，有时在DOS下复制文件，可是有的文件或文件夹名是中文的，因此显示为乱码。

  【操作方法】 其实Windows 98对DOS下中文的支持是很不错的，可以在DOS提示符下输入“pdos95”，然后按【Enter】键，即可看到已进入了中文DOS模式，可以按【Ctrl+Shift】键来切换输入法输入中文。【相关知识】 “pdos95”是一个批处理文件，其位置在“Windows\Command”文件夹中。 

--------------------------------------------------
windows自定义快捷键备忘

...............................
Everything内部专用快捷键组合：Ctrl + win
筛选器“所有”：Ctrl + win + a

--------------------------------------------------
在dos中，如果使用ls命令列出文件列表的话，中文文件名乱码。如果使用dir /b命令的话，显示正常。
为什么？

--------------------------------------------------
如何自定义语法高亮。
我想为我的备忘录文件：.note，定义一个语法高亮。

--------------------------------------------------
修改window中dos的编码。
http://www.360doc.com/content/14/0902/21/13883922_406610370.shtml

--------------------------------------------------

--------------------------------------------------

==================================================================
摘录
==================================================================
我发现在写TEX 文档时候，使用
\begin{verbatim}\end{verbatim}
环境时，
编译出来的pdf文件没有把Tab转成空格。 只要命令 set expandtab 即可,
这样在输入一个Tab时就相当于输入四个空格。 转载别人的使用经验. 
我在搜索 Tab 转化成空格时发现的。


vim 使用经验
先稍为介绍一下 vim. vi 是 unix/linux 下极为普遍的一种文本编辑器, 大部分机器上都
有. vi 有各种变种, 在不同的机器上常用不同的变种软件. 其中 vim 比较好用也用得比较
广泛. vim 是 Vi IMproved 的缩写, 表示更好的 vi. 我个人觉得它是非常好的编辑器(为
了避免 Emacs 粉丝挑眼, 就不说最好了). 没用过的也建议试试看, 当然 vim 对编写文本
文件很方便好用, 比如编写程序, html文档等等, 却不能用来编写 word 文档.

关于 vim 的安装, 基本使用方法等网络上能搜出许多, 就不在这里罗嗦了, 要是对 vim 有
兴趣, 那就看看这里(中文文档): http://vcd.gro.clinux.org/

本文就说些其中比较有用, 比较常用的命令, 若能熟练运用这些命令, 那么会发现编辑文件
很舒服.

说明:
以下的例子中 xxx 表示在命令模式下输入 xxx 并回车
以下的例子中 :xxx 表示在扩展模式下输入 xxx 并回车
小括号中的命令表示相关命令.
在编辑模式或可视模式下输入的命令会另外注明.

1. 查找

  /xxx(?xxx)      表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示
                  向上查找.其中xxx可以是正规表达式,关于正规式就不多说了.
                  一般来说是区分大小写的, 要想不区分大小写, 那得先输入
                  :set ignorecase
                  查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.

  *(#)            当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的
                  下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方
                  向查找.

  g*(g#)          此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而
                  是匹配包含该单词的所有字符串.

  gd              本命令查找与光标所在单词相匹配的单词, 并将光标停留在文档的非
                  注释段中第一次出现这个单词的地方.

  %               本命令查找与光标所在处相匹配的反括号, 包括 () [] {}

  f(F)x           本命令表示在光标所在行进行查找, 查找光标右(左)方第一个x字符.
                  找到后:
                  输入 ; 表示继续往下找
                  输入 , 表示反方向查找

2. 快速移动光标
   在 vi 中, 移动光标和编辑是两件事, 正因为区分开来, 所以可以很方便的进行光标定
位和编辑. 因此能更快一点移动光标是很有用的.

  w(e)            移动光标到下一个单词.
  b               移动光标到上一个单词.

  0               移动光标到本行最开头.
  ^               移动光标到本行最开头的字符处.
  $               移动光标到本行结尾处.

  H               移动光标到屏幕的首行.
  M               移动光标到屏幕的中间一行.
  L               移动光标到屏幕的尾行.
  gg              移动光标到文档首行.
  G               移动光标到文档尾行.
  c-f             (即 ctrl 键与 f 键一同按下) 本命令即 page down.
  c-b             (即 ctrl 键与 b 键一同按下, 后同) 本命令即 page up.

  ''              此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查
                  找到某个单词后, 再输入此命令则回到上次停留的位置.

  '.              此命令相当好使, 它移动光标到上一次的修改行.

  `.              此命令相当强大, 它移动光标到上一次的修改点.

3. 拷贝, 删除与粘贴
   在 vi 中 y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令
结合的, 看几个例子就能够明白了.

  yw              表示拷贝从当前光标到光标所在单词结尾的内容.
  dw              表示删除从当前光标到光标所在单词结尾的内容.
  y0              表示拷贝从当前光标到光标所在行首的内容.
  d0              表示删除从当前光标到光标所在行首的内容.
  y$              表示拷贝从当前光标到光标所在行尾的内容.
  d$              表示删除从当前光标到光标所在行尾的内容.
  yfa             表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
  dfa             表示删除从当前光标到光标后面的第一个a字符之间的内容.

  特殊地:
  yy              表示拷贝光标所在行.
  dd              表示删除光标所在行.
  D               表示删除从当前光标到光标所在行尾的内容.

  关于拷贝, 删除和粘贴的复杂用法与寄存器有关, 可以自行查询.

4. 数字与命令
   在 vi 中数字与命令结合往往表示重复进行此命令, 若在扩展模式的开头出现则表示行
号定位. 如:

  5fx             表示查找光标后第 5 个 x 字符.

  5w(e)           移动光标到下五个单词.

  5yy             表示拷贝光标以下 5 行.
  5dd             表示删除光标以下 5 行.

  y2fa            表示拷贝从当前光标到光标后面的第二个a字符之间的内容.

  :12,24y         表示拷贝第12行到第24行之间的内容.
  :12,y           表示拷贝第12行到光标所在行之间的内容.
  :,24y           表示拷贝光标所在行到第24行之间的内容. 删除类似.

5. 快速输入字符
   在 vi 中, 不要求你输入每一个字符, 可以有很多种方法快速输入一些字符.
   使用 linux/unix 的同学一定有一个经验, 在命令行下输入命令时敲入头几个字符再按
TAB 系统就会自动将剩下的字符补齐, 假如有多个匹配则会打印出来. 这就是著名的命令
补齐(其实windows中也有文件名补齐功能). vi 中有许多的字符串补齐命令, 非常方便.

  c-p(c-n)        在编辑模式中, 输入几个字符后再输入此命令则 vi 开始向上(下)搜
                  索开头与其匹配的单词并补齐, 不断输入此命令则循环查找. 此命令
                  会在所有在这个 vim 程序中打开的文件中进行匹配.

  c-x-l           在编辑模式中, 此命令快速补齐整行内容, 但是仅在本窗口中出现的
                  文档中进行匹配.

  c-x-f           在编辑模式中, 这个命令表示补齐文件名. 如输入:
                  /usr/local/tom 后再输入此命令则它会自动匹配出:
                  /usr/local/tomcat/

  abbr            即缩写. 这是一个宏操作, 可以在编辑模式中用一个缩写代替另一个
                  字符串. 比如编写java文件的常常输入 System.out.println, 这很
                  是麻烦, 所以应该用缩写来减少敲字. 可以这么做:
                  :abbr sprt System.out.println
                  以后在输入sprt后再输入其他非字母符号, 它就会自动扩展为System.
                  out.println

6. 替换
   替换是 vi 的强项, 因为可以用正规表达式来匹配字符串.以下提供几个例子.

  :s/aa/bb/g      将光标所在行出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :s/\<aa\</bb/g  将光标所在行出现的所有 aa 替换为 bb, 仅替换 aa 这个单词
  :%s/aa/bb/g     将文档中出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :12,23s/aa/bb/g 将从12行到23行中出现的所有包含 aa 的字符串中的 aa 替换为 bb
  :12,23s/^/#/    将从12行到23行的行首加入 # 字符
  :%s= *$==       将所有行尾多余的空格删除
  :g/^\s*$/d       将所有不包含字符(空格也不包含)的空行删除.

7. 多文件编辑
   在一个 vim 程序中打开很多文件进行编辑是挺方便的.

  :sp(:vsp) 文件名    vim 将分割出一个横(纵)向窗口, 并在该窗口中打开新文件.
                      从 vim6.0 开始, 文件名可以是一个目录的名称, 这样, vim 会
                      把该目录打开并显示文件列表, 在文件名上按回车则在本窗口打
                      开该文件, 若输入 O 则在新窗口中打开该文件, 输入 ? 可以看
                      到帮助信息.

  :e 文件名           vim 将在原窗口中打开新的文件, 若旧文件编辑过, 会要求保存.

  c-w-w               vim 分割了好几个窗口怎么办? 输入此命令可以将光标循环定位
                      到各个窗口之中.

  :ls                 此命令查看本 vim 程序已经打开了多少个文件, 在屏幕的最下方
                      会显示出如下数据:
                      1   %a      "usevim.html"         行 162
                      2   #       "xxxxxx.html"         行 0

                      其中:
                      1               表示打开的文件序号, 这个序号很有用处.
                      %a              表示文件代号, % 表示当前编辑的文件,
                                      # 表示上次编辑的文件
                      "usevim.html"   表示文件名.
                      行 162          表示光标位置.

  :b 序号(代号)       此命令将指定序号(代号)的文件在本窗口打开, 其中的序号(代号)
                      就是用 :ls 命令看到的.

  :set diff           此命令用于比较两个文件, 可以用
                      :vsp filename
                      命令打开另一个文件, 然后在每个文件窗口中输入此命令,就能看
                      到效果了.

8. 宏替换
   vi 不仅可以用 abbr 来替换文字, 也可以进行命令的宏定义. 有些命令输起来很费劲,
因此我把它们定义到 <F1<-<F12< 上, 这样就很方便了.这些配置可以预先写到 ~/.vimrc
(windows 下为 $VIM/_vimrc) 中, 写进去的时候不用写前面的冒号.

  :nmap <F2< :nohls<cr<              取消被搜索字串的高亮
  :nmap <F9< <C-W<w                  命令模式下转移光标到不同窗口
  :imap <F9< <ESC<<F9<               输入模式下运行<F9<
  :nmap <F12< :%s= *$==<cr<          删除所有行尾多余的空格.
  :imap <F12< <ESC<<F12<             同上

  :java 中: (注, 这里为什么说 java 中, 因为以下定义对其他文件格式不起作用, 下文
            会说到如何实现这一点)
  :nmap <F3< :comp javac<CR<:mak -d . %<CR<
       此命令用 javac 编译 java 文件, 它会自动将光标定位到出错点. 不过这需要定
       义一个 javac.vim 文件在 $VIM/compiler 下, 在 javac.vim 里面只有两行字:
          setlocal makeprg=javac
          setlocal errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#

  :nmap <F4< :comp ant<CR<:mak<CR<
       此命令用 ant 编译 java 文件, 它会自动将光标定位到出错点. 一般来说, 安装
       vim 后已经有了compiler/ant.vim文件, 因此这个命令可以直接使用. 但是需要
       在当前目录下有 build.xml 文件, 当然还必须安装 ant 才行.

  :nmap <F5< :cl<CR<                 此命令用于查看所有的编译错误.
  :imap <F5< <ESC<<F5<

  :nmap <F6< :cc<CR<                 此命令用于查看当前的编译错误.
  :imap <F6< <ESC<<F6<

  :nmap <F7< :cn<CR<                 此命令用于跳到下一个出错位置.
  :imap <F7< <ESC<<F7<

  :nmap <F8< :cp<CR<                 此命令用于跳到上一个出错位置.
  :imap <F8< <ESC<<F8<

  :nmap <F11< :JavaBrowser<cr<
       此命令用于在窗口左部分割出一个新窗口, 里面的内容是 java 的资源树, 包括
       本文件中出现的类, 类的成员变量及成员方法, 就好像 JCreator 表现的那样.
       在这个窗口中输入 ? 会看到帮助. 嘿嘿, 很好用, 不过需要 ctags 支持.
  :imap <F11< <ESC<<F11<

9. TAB
   TAB 就是制表符, 单独拿出来做一节是因为这个东西确实很有用.

   <<                  输入此命令则光标所在行向左移动一个 tab.
   <<                  输入此命令则光标所在行向右移动一个 tab.
   5<<                 输入此命令则光标后 5 行向右移动一个 tab.
   :12,24<             此命令将12行到14行的数据都向右移动一个 tab.
   :12,24<<            此命令将12行到14行的数据都向右移动两个 tab.

   那么如何定义 tab 的大小呢? 有人愿意使用 8 个空格位, 有人用4个, 有的用2个.
   有的人希望 tab 完全用空格代替, 也有的人希望 tab 就是 tab. 没关系, vim 能
   帮助你.以下的设置一般也都先写入配置文件中, 免得老敲.

   :set shiftwidth=4   设置自动缩进 4 个空格, 当然要设自动缩进先.
   :set sts=4          即设置 softtabstop 为 4. 输入 tab 后就跳了 4 格.
   :set tabstop=4      实际的 tab 即为 4 个空格, 而不是缺省的 8 个.
   :set expandtab      在输入 tab 后, vim 用恰当的空格来填充这个 tab.

motioo补充：把编辑的文档30到50行中的Tab替换成4个空格的名利是 :30,50s/\t/    /g

10. autocmd
    这个命令十分的强大, 可以用这个命令实现对不同的文件格式应用不同的配置; 可以
在新建文件时自动添加上版权声明等等. 这些命令一般定义在 ~/.vimrc 这样的配置文件
里面. 由于他很强大, 所以我不能给出很具体的说明, 只能举几个例子, 详细的请看帮助.

  :autocmd!               删除所有之前的自动命令.
  autocmd FileType        java  source ~/.vim/files/java.vim
  autocmd FileType        java  source ~/.vim/files/jcommenter.vim
    以上两条命令让我在打开 java 文件时才应用后面提到的两个配置文件.
  autocmd BufNewFile      *.java  0r ~/.vim/files/skeletons/java.skel
    以上这条命令让我在新建 java 文件时自动加入 java.skel 文件的内容.
  autocmd BufNewFile      *.java  normal gnp
    以上这条命令让我在新建 java 文件时自动运行 gnp 命令, 这个命令进行一些特殊化
    处理, 比如将新 java 文件中的 __date__ 替换成今天的日期什么的.

11. 常用脚本
    在 vim.sf.net 你可以发现很多脚本(script), 这些脚本常常有让你意想不到的作用.
我常用的有:

    jcommenter.vim        自动加入 javadoc 风格的注释.
    JBrowser.vim          类资源浏览. C, C++ 等可以用 Tlist

    还有许多有用的, 比如 checkstyle.vim 可以检验你的编程风格, jad.vim 可以直接
    反编译 .class 文件等等.

12. 常用配置
    在~/.vimrc 配置文件中你常常需要一些个性化配置. 比如上面写的一些宏定义, 一些
autocmd 定义等等. 比如:

    set suffixes=.bak,~,.o,.h,.info,.swp,.aux,.bbl,.blg,.dvi,.lof,.log,.lot,.ps,.toc
        这样在vim中打开文件时, 按 tab 键补齐文件名时它会忽略上述文件.

    set nu          显示行号
    set ai          设置自动缩进
    map Y y$        让 Y 和 D 一样, 要不然 Y 的本意和 yy 一样.

13. 其他
    还有许多有意思的命令, 记录在这里免得忘记.

    .                                               重复上次编辑命令.
    :g/^/exec "s/^/".strpart(line(".")." ", 0, 4)   在行首插入行号
    :runtime! syntax/2html.vim                      转换 txt 成 html, 会按照你的
                                                    颜色配置来转


14. 重复做一组操作的宏

在命令模式下，输入qa 则定义了一个名字为a的宏。a 可以换成其他25个英文字母。

输入qa 所有的操作都被记录下来，直到输入q后记录结束。然后可以使用@a 来执行

a记录的操作。也可以用 3@a 来执行3次q记录的操作。

下面是一个例子，看看宏是怎样应用的。

利用我们有这样几行

stdio.h

fcntl.h

unistd.h

stdlib.h

我们想把他们改成下面的样子：

#include “stdio.h”

#include “fcntl.h”

#include “unistd.h”

#include “stdlib.h”

我们现移动到第一行，然后执行命令

qa 开始记录宏操作

^ 移动行首

i#include “<Esc< 在行首处输入#include", 然后敲击Esc 回到命令行模式.

$ 移动到行尾.

a”<Esc< 在行末插入",然后敲击Esc回到命令行模式.

j 移动到下一行.

q 停止记录宏.

现在可以敲击命令 @a, 或者 3@a 来执行宏中的操作。



15. 用VIM (vim, gvim)写程序的时候:

gd 可以到找到光标处的变量的原始定义。

Ctrl+D 可以到光标处的宏定义的地方  #define 定义的宏
 
代码折叠
-----------------------------------------------
set foldmethod=syntax " 用语法高亮来定义折叠
set foldmethod=indent " 更多的缩进表示更高级别的折叠(这个似乎效果好一些)

zo 打开折叠，也可以用方向键(左右键)打开折叠
zc 关闭折叠(只要在被折叠的块中的任一个语句就行)
zC 对所在范围内所有嵌套的折叠点进行折叠
zO 对所在范围内所有嵌套的折叠点展开

    当使用marker方式时，需要用标计来标识代码的折叠，系统默认是{{{和}}}，最好不要改动之。可以使用下面的命令来创建和删除折叠：

zf   创建折叠，比如在marker方式下：
     zf56G，创建从当前行起到56行的代码折叠；
     10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
     10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
     在括号处zf%，创建从当前行起到对应的匹配的括号上去（()，{}，[]，<>等）。

zd   删除(delete)在光标下的折叠。仅当'foldmethod'设为"manual"或"marker"时有效。
     : set foldmethod (查看当前foldmethod设置，vim默认设置为manual)。
zD   循环删除(Delete)光标下的折叠，即嵌套删除折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。
zE   除去(Eliminate)窗口里"所有"的折叠。
     仅当'foldmethod'设为"manual"或"marker"时有效。


切换窗口
-----------------------------------------------
用<C-W><C-W>切换当前窗口
当同时打开几个文件时，按<C-W>_使当前窗口最大化

<C-W> = ctrl+w


[+I显示文件中包含光标下<word>的所有行。我常用来浏览某个id在程序中的引用情况。[+I (大写I)


dfx   表示删除到下一个出现x的地方，x可以使任意字符。



%
--------------------------------
%用来匹配块
如果你的光标在类似([{}])或者#ifdef #else #endif上，输入%将把光标跳转到相应的匹配符号上去。

%还可以用来指定命令范围，如果你想把一个
{
    ...
}
的块全部删除。
可以先把光标移到{再敲d%

如果你想把一个块(包括{})全部往里缩进一个tab
可以把光标移到{敲>%

可以把光标移到{敲=%就是缩进一个块

===============================================================================
修改
